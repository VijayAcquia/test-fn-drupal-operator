// +build !ignore_autogenerated

// This file was autogenerated by openapi-gen. Do not edit it manually!

package v1alpha1

import (
	spec "github.com/go-openapi/spec"
	common "k8s.io/kube-openapi/pkg/common"
)

func GetOpenAPIDefinitions(ref common.ReferenceCallback) map[string]common.OpenAPIDefinition {
	return map[string]common.OpenAPIDefinition{
		"./pkg/apis/fnresources/v1alpha1.CronSpec":                schema_pkg_apis_fnresources_v1alpha1_CronSpec(ref),
		"./pkg/apis/fnresources/v1alpha1.DrupalApplication":       schema_pkg_apis_fnresources_v1alpha1_DrupalApplication(ref),
		"./pkg/apis/fnresources/v1alpha1.DrupalApplicationSpec":   schema_pkg_apis_fnresources_v1alpha1_DrupalApplicationSpec(ref),
		"./pkg/apis/fnresources/v1alpha1.DrupalApplicationStatus": schema_pkg_apis_fnresources_v1alpha1_DrupalApplicationStatus(ref),
		"./pkg/apis/fnresources/v1alpha1.DrupalEnvironment":       schema_pkg_apis_fnresources_v1alpha1_DrupalEnvironment(ref),
		"./pkg/apis/fnresources/v1alpha1.DrupalEnvironmentSpec":   schema_pkg_apis_fnresources_v1alpha1_DrupalEnvironmentSpec(ref),
		"./pkg/apis/fnresources/v1alpha1.DrupalEnvironmentStatus": schema_pkg_apis_fnresources_v1alpha1_DrupalEnvironmentStatus(ref),
		"./pkg/apis/fnresources/v1alpha1.InstallSpec":             schema_pkg_apis_fnresources_v1alpha1_InstallSpec(ref),
		"./pkg/apis/fnresources/v1alpha1.Site":                    schema_pkg_apis_fnresources_v1alpha1_Site(ref),
		"./pkg/apis/fnresources/v1alpha1.SiteSpec":                schema_pkg_apis_fnresources_v1alpha1_SiteSpec(ref),
		"./pkg/apis/fnresources/v1alpha1.SiteStatus":              schema_pkg_apis_fnresources_v1alpha1_SiteStatus(ref),
	}
}

func schema_pkg_apis_fnresources_v1alpha1_CronSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Crons to run on the site",
				Properties: map[string]spec.Schema{
					"suspend": {
						SchemaProps: spec.SchemaProps{
							Description: "FailedJobsHistoryLimit     *int32 `json:\"failedJobsHistoryLimit,omitempty\"`     // +optional SuccessfulJobsHistoryLimit *int32 `json:\"successfulJobsHistoryLimit,omitempty\"` // +optional StartingDeadlineSeconds    *int64 `json:\"startingDeadlineSeconds,omitempty\"`    // +optional",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"concurrencyPolicy": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"name": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"command": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
					"schedule": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
				Required: []string{"name", "command", "schedule"},
			},
		},
		Dependencies: []string{},
	}
}

func schema_pkg_apis_fnresources_v1alpha1_DrupalApplication(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "DrupalApplication is the Schema for the drupalapplications API",
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("./pkg/apis/fnresources/v1alpha1.DrupalApplicationSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("./pkg/apis/fnresources/v1alpha1.DrupalApplicationStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"./pkg/apis/fnresources/v1alpha1.DrupalApplicationSpec", "./pkg/apis/fnresources/v1alpha1.DrupalApplicationStatus", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_pkg_apis_fnresources_v1alpha1_DrupalApplicationSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "DrupalApplicationSpec defines the desired state of a Drupal Application",
				Properties: map[string]spec.Schema{
					"imageRepo": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"gitRepo": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
			},
		},
		Dependencies: []string{},
	}
}

func schema_pkg_apis_fnresources_v1alpha1_DrupalApplicationStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "DrupalApplicationStatus defines the observed state of a Drupal Application",
				Properties: map[string]spec.Schema{
					"numEnvironments": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"integer"},
							Format: "int32",
						},
					},
					"environments": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("./pkg/apis/fnresources/v1alpha1.DrupalEnvironmentRef"),
									},
								},
							},
						},
					},
				},
				Required: []string{"numEnvironments"},
			},
		},
		Dependencies: []string{
			"./pkg/apis/fnresources/v1alpha1.DrupalEnvironmentRef"},
	}
}

func schema_pkg_apis_fnresources_v1alpha1_DrupalEnvironment(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "DrupalEnvironment is the Schema for the drupalenvironments API",
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("./pkg/apis/fnresources/v1alpha1.DrupalEnvironmentSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("./pkg/apis/fnresources/v1alpha1.DrupalEnvironmentStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"./pkg/apis/fnresources/v1alpha1.DrupalEnvironmentSpec", "./pkg/apis/fnresources/v1alpha1.DrupalEnvironmentStatus", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_pkg_apis_fnresources_v1alpha1_DrupalEnvironmentSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "DrupalEnvironmentSpec defines the desired state of DrupalEnvironment",
				Properties: map[string]spec.Schema{
					"application": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"production": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"boolean"},
							Format: "",
						},
					},
					"efsid": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"gitRef": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"drupal": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("./pkg/apis/fnresources/v1alpha1.SpecDrupal"),
						},
					},
					"apache": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("./pkg/apis/fnresources/v1alpha1.SpecApache"),
						},
					},
					"phpfpm": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("./pkg/apis/fnresources/v1alpha1.SpecPhpFpm"),
						},
					},
					"proxySQL": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("./pkg/apis/fnresources/v1alpha1.SpecProxySQL"),
						},
					},
				},
				Required: []string{"application", "production", "efsid", "gitRef", "drupal", "apache", "phpfpm", "proxySQL"},
			},
		},
		Dependencies: []string{
			"./pkg/apis/fnresources/v1alpha1.SpecApache", "./pkg/apis/fnresources/v1alpha1.SpecDrupal", "./pkg/apis/fnresources/v1alpha1.SpecPhpFpm", "./pkg/apis/fnresources/v1alpha1.SpecProxySQL"},
	}
}

func schema_pkg_apis_fnresources_v1alpha1_DrupalEnvironmentStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "DrupalEnvironmentStatus defines the observed state of DrupalEnvironment",
				Properties:  map[string]spec.Schema{},
			},
		},
		Dependencies: []string{},
	}
}

func schema_pkg_apis_fnresources_v1alpha1_InstallSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Information to install the site",
				Properties: map[string]spec.Schema{
					"installProfile": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"adminUsername": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"adminEmail": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
				Required: []string{"installProfile", "adminUsername", "adminEmail"},
			},
		},
		Dependencies: []string{},
	}
}

func schema_pkg_apis_fnresources_v1alpha1_Site(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Site is the Schema for the sites API",
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("./pkg/apis/fnresources/v1alpha1.SiteSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("./pkg/apis/fnresources/v1alpha1.SiteStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"./pkg/apis/fnresources/v1alpha1.SiteSpec", "./pkg/apis/fnresources/v1alpha1.SiteStatus", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_pkg_apis_fnresources_v1alpha1_SiteSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "SiteSpec defines the desired state of Site",
				Properties: map[string]spec.Schema{
					"domains": {
						SchemaProps: spec.SchemaProps{
							Description: "Important: Run \"operator-sdk generate k8s\" to regenerate code after modifying this file Add custom validation using kubebuilder tags: https://book.kubebuilder.io/beyond_basics/generating_crd.html",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
					"environment": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"install": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("./pkg/apis/fnresources/v1alpha1.InstallSpec"),
						},
					},
					"crons": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("./pkg/apis/fnresources/v1alpha1.CronSpec"),
									},
								},
							},
						},
					},
					"tls": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"boolean"},
							Format: "",
						},
					},
					"ingressClass": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"certIssuer": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
				Required: []string{"domains", "environment"},
			},
		},
		Dependencies: []string{
			"./pkg/apis/fnresources/v1alpha1.CronSpec", "./pkg/apis/fnresources/v1alpha1.InstallSpec"},
	}
}

func schema_pkg_apis_fnresources_v1alpha1_SiteStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "SiteStatus defines the observed state of Site",
				Properties:  map[string]spec.Schema{},
			},
		},
		Dependencies: []string{},
	}
}
